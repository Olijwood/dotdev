generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id                      String                 @id @default(cuid())
    name                    String
    email                   String                 @unique
    emailVerified           DateTime?
    username                String?                @unique
    image                   String?
    password                String?
    role                    UserRole               @default(USER)
    isTwoFactorEnabled      Boolean                @default(false)
    twoFactorConfirmation   TwoFactorConfirmation?
    twoFactorConfirmationId String?
    createdAt               DateTime               @default(now())
    updatedAt               DateTime               @updatedAt
    accounts                Account[]
    posts                   Post[]
    reactions               Reaction[]
    Comment                 Comment[]
    commentLike             CommentLike[]
    Reply                   Reply[]
    replyLike               ReplyLike[]
    savedPosts              SavedPost[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id        String   @id @default(cuid())
    email     String
    token     String   @unique
    expiresAt DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Post {
    id            String      @id @default(uuid()) // Unique ID
    title         String
    slug          String      @unique
    content       String
    bannerImgUrl  String      @default("")
    published     Boolean     @default(false)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    commentCount  Int         @default(0)
    reactionCount Int         @default(0)
    saveCount     Int         @default(0)
    userId        String
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    reactions     Reaction[]
    comments      Comment[]
    savedBy       SavedPost[]
    tags          PostTag[]

    @@index([userId])
    @@index([createdAt])
    @@index([published])
    @@index([commentCount, reactionCount, saveCount])
}

enum ReactionType {
    CLAP
    FIRE
    HEART
    THUMBS_UP
}

model Reaction {
    userId String
    postId String
    type   ReactionType
    user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    post   Post         @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([userId, postId, type])
    @@index([postId]) 
}

model SavedPost {
    id        String   @id @default(cuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
}

model Comment {
    id           String        @id @default(cuid())
    content      String
    likes        Int           @default(0)
    repliesCount Int           @default(0)
    userId       String
    postId       String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
    replies      Reply[]
    commentLike  CommentLike[]

    @@index([postId])
}

model Reply {
    id        String      @id @default(cuid())
    content   String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    likes     Int         @default(0)
    userId    String
    commentId String
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment   Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
    replyLike ReplyLike[]

    @@index([commentId])   
}

model CommentLike {
    id        String @id @default(cuid())
    userId    String
    commentId String

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId])
}

model ReplyLike {
    id      String @id @default(cuid())
    userId  String
    replyId String

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    reply Reply @relation(fields: [replyId], references: [id], onDelete: Cascade)

    @@unique([userId, replyId])
}

model Tag {
    id          String    @id @default(cuid())
    name        String    
    displayName String?
    description String?
    color       String    @default("text-gray-600")
    badge       String?
    guidelines  String?   @default("")
    about       String?   @default("")
    aboutLink   String?   @default("")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    posts       PostTag[]

    @@unique([name])
    @@index([name])
}

model PostTag {
    id        String   @id @default(cuid())
    postId    String
    tagId     String
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([postId, tagId])
    @@index([postId])
    @@index([tagId])
}